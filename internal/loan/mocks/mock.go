// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	loan "loan-service/internal/loan"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// ApproveLoan mocks base method.
func (m *MockIService) ApproveLoan(ctx context.Context, approval loan.ApprovalRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveLoan", ctx, approval)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveLoan indicates an expected call of ApproveLoan.
func (mr *MockIServiceMockRecorder) ApproveLoan(ctx, approval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveLoan", reflect.TypeOf((*MockIService)(nil).ApproveLoan), ctx, approval)
}

// CreateLoan mocks base method.
func (m *MockIService) CreateLoan(ctx context.Context, loan *loan.Loan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoan", ctx, loan)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLoan indicates an expected call of CreateLoan.
func (mr *MockIServiceMockRecorder) CreateLoan(ctx, loan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoan", reflect.TypeOf((*MockIService)(nil).CreateLoan), ctx, loan)
}

// DisburseLoan mocks base method.
func (m *MockIService) DisburseLoan(ctx context.Context, disbursement loan.Disbursement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisburseLoan", ctx, disbursement)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisburseLoan indicates an expected call of DisburseLoan.
func (mr *MockIServiceMockRecorder) DisburseLoan(ctx, disbursement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisburseLoan", reflect.TypeOf((*MockIService)(nil).DisburseLoan), ctx, disbursement)
}

// GetLoanByID mocks base method.
func (m *MockIService) GetLoanByID(ctx context.Context, id int64) (loan.LoanDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanByID", ctx, id)
	ret0, _ := ret[0].(loan.LoanDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoanByID indicates an expected call of GetLoanByID.
func (mr *MockIServiceMockRecorder) GetLoanByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanByID", reflect.TypeOf((*MockIService)(nil).GetLoanByID), ctx, id)
}

// InvestLoan mocks base method.
func (m *MockIService) InvestLoan(ctx context.Context, investment loan.Investment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvestLoan", ctx, investment)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvestLoan indicates an expected call of InvestLoan.
func (mr *MockIServiceMockRecorder) InvestLoan(ctx, investment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvestLoan", reflect.TypeOf((*MockIService)(nil).InvestLoan), ctx, investment)
}

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// CreateInvestment mocks base method.
func (m *MockIRepository) CreateInvestment(ctx context.Context, investment *loan.Investment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvestment", ctx, investment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInvestment indicates an expected call of CreateInvestment.
func (mr *MockIRepositoryMockRecorder) CreateInvestment(ctx, investment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvestment", reflect.TypeOf((*MockIRepository)(nil).CreateInvestment), ctx, investment)
}

// CreateLoan mocks base method.
func (m *MockIRepository) CreateLoan(ctx context.Context, loan *loan.Loan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoan", ctx, loan)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLoan indicates an expected call of CreateLoan.
func (mr *MockIRepositoryMockRecorder) CreateLoan(ctx, loan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoan", reflect.TypeOf((*MockIRepository)(nil).CreateLoan), ctx, loan)
}

// GetInvestmentDetail mocks base method.
func (m *MockIRepository) GetInvestmentDetail(ctx context.Context, loanId int64) ([]loan.InvestmentDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvestmentDetail", ctx, loanId)
	ret0, _ := ret[0].([]loan.InvestmentDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvestmentDetail indicates an expected call of GetInvestmentDetail.
func (mr *MockIRepositoryMockRecorder) GetInvestmentDetail(ctx, loanId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvestmentDetail", reflect.TypeOf((*MockIRepository)(nil).GetInvestmentDetail), ctx, loanId)
}

// GetInvestorByLoanId mocks base method.
func (m *MockIRepository) GetInvestorByLoanId(ctx context.Context, loanId int64) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvestorByLoanId", ctx, loanId)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvestorByLoanId indicates an expected call of GetInvestorByLoanId.
func (mr *MockIRepositoryMockRecorder) GetInvestorByLoanId(ctx, loanId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvestorByLoanId", reflect.TypeOf((*MockIRepository)(nil).GetInvestorByLoanId), ctx, loanId)
}

// GetLoanByID mocks base method.
func (m *MockIRepository) GetLoanByID(ctx context.Context, id int64) (*loan.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanByID", ctx, id)
	ret0, _ := ret[0].(*loan.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoanByID indicates an expected call of GetLoanByID.
func (mr *MockIRepositoryMockRecorder) GetLoanByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanByID", reflect.TypeOf((*MockIRepository)(nil).GetLoanByID), ctx, id)
}

// GetTotalInvestment mocks base method.
func (m *MockIRepository) GetTotalInvestment(ctx context.Context, loanID int64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalInvestment", ctx, loanID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalInvestment indicates an expected call of GetTotalInvestment.
func (mr *MockIRepositoryMockRecorder) GetTotalInvestment(ctx, loanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalInvestment", reflect.TypeOf((*MockIRepository)(nil).GetTotalInvestment), ctx, loanID)
}

// IsBorrowerExist mocks base method.
func (m *MockIRepository) IsBorrowerExist(ctx context.Context, borrowerId int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBorrowerExist", ctx, borrowerId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsBorrowerExist indicates an expected call of IsBorrowerExist.
func (mr *MockIRepositoryMockRecorder) IsBorrowerExist(ctx, borrowerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBorrowerExist", reflect.TypeOf((*MockIRepository)(nil).IsBorrowerExist), ctx, borrowerId)
}

// IsInvestorExist mocks base method.
func (m *MockIRepository) IsInvestorExist(ctx context.Context, investorId int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInvestorExist", ctx, investorId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsInvestorExist indicates an expected call of IsInvestorExist.
func (mr *MockIRepositoryMockRecorder) IsInvestorExist(ctx, investorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInvestorExist", reflect.TypeOf((*MockIRepository)(nil).IsInvestorExist), ctx, investorId)
}

// UpdateLoan mocks base method.
func (m *MockIRepository) UpdateLoan(ctx context.Context, loan *loan.Loan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoan", ctx, loan)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLoan indicates an expected call of UpdateLoan.
func (mr *MockIRepositoryMockRecorder) UpdateLoan(ctx, loan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoan", reflect.TypeOf((*MockIRepository)(nil).UpdateLoan), ctx, loan)
}
